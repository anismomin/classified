{"version":3,"sources":["app/accounts/AccountsService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;YAYA;gBAIC,yBAAmB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;gBAAI,CAAC;gBAGlC,+BAAK,GAAL,UAAM,UAAU;oBAEf,IAAI,KAAK,GAAG,WAAW,GAAG,UAAU,CAAC,QAAQ,GAAG,YAAY,GAAG,UAAU,CAAC,QAAQ,CAAC;oBAEnF,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;oBAEpE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE;wBACtC,OAAO,EAAE,OAAO;qBAChB,CAAC;yBACD,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;yBACtB,KAAK,CAAC,IAAI,CAAC,CAAC;gBAEd,CAAC;gBACD;;;;;;;;;;;;;;;;;;;;;mBAqBG;gBAEH,kCAAQ,GAAR,UAAS,QAAQ;oBAEhB,IAAI,QAAQ,GAAG,WAAW,GAAG,QAAQ,CAAC,QAAQ,GAAG,SAAS,GAAG,QAAQ,CAAC,KAAK,GAAG,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC;oBAC/G,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACtB,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;oBAEpE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE;wBAC5C,OAAO,EAAE,OAAO;qBAChB,CAAC;yBACD,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;yBACtB,KAAK,CAAC,IAAI,CAAC,CAAC;gBAEd,CAAC;gBAED,gCAAM,GAAN;oBACC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;yBAC7B,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;gBAC1B,CAAC;gBA/DF;oBAAC,iBAAU,EAAE;;mCAAA;gBAiEb,sBAAC;YAAD,CAhEA,AAgEC,IAAA;YAhED,6CAgEC,CAAA","file":"app/accounts/AccountsService.js","sourcesContent":["import {Injectable} from 'angular2/core'\nimport { Http, Headers, Response } from 'angular2/http';\n\n//Grab everything with import 'rxjs/Rx';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/delay';\nimport 'rxjs/add/operator/retry';\nimport 'rxjs/add/operator/timeout';\n\n@Injectable()\nexport class AccountsService {\n\n\tpublic postResponse;\n\n\tconstructor(public http: Http) { }\n\n\n\tlogin(loginCreds) {\n\t\t\n\t\tlet login = \"username=\" + loginCreds.username + \"&password=\" + loginCreds.password;\n\t\t\n\t\tvar headers = new Headers();\n\t\theaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n\t\treturn this.http.post('/login', login, {\n\t\t\theaders: headers\n\t\t})\n\t\t.map(res => res.json())\n\t\t.delay(3000);\n\n\t}\n\t/*login(loginCreds) {\n\n\t\tlet login = \"username=\" + loginCreds.username + \"&password=\" + loginCreds.password;\n\n\t\tvar headers = new Headers();\n\t\theaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n\t\treturn this.http.post('/login', login, {\n\t\t\theaders: headers,\n\t\t\ttimeout: 1000\n\t\t})\n\t\t.retry(2)\n\t\t.timeout(1000, new Error('checking for error.'))\n\t\t\n\t\t.map(res => res.json())\n\t\t.delay(2000)\n\t\t.subscribe(\n          (data) => resolve(data.json()),\n          (err) => reject(err)\n        );;\n\n\t}*/\n\n\tregister(regCreds) {\n\n\t\tlet register = \"username=\" + regCreds.username + \"&email=\" + regCreds.email + \"&password=\" + regCreds.password;\n\t\tconsole.log(register);\n\t\tvar headers = new Headers();\n\t\theaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n\t\treturn this.http.post('/register', register, {\n\t\t\theaders: headers\n\t\t})\n\t\t.map(res => res.json())\n\t\t.delay(3000);\n\n\t}\n\n\tlogOut() {\n\t\treturn this.http.get('/logout')\n\t\t\t.map(res => res.json());\n\t}\n\n}"],"sourceRoot":"/source/"}
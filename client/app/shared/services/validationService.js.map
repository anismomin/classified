{"version":3,"sources":["app/shared/services/validationService.ts"],"names":[],"mappings":";;;;;;;YAOA;gBAAA;gBAkEA,CAAC;gBAhEU,0CAAwB,GAA/B,UAAgC,IAAY;oBACxC,IAAI,MAAM,GAAG;wBACT,UAAU,EAAE,mBAAmB;wBAC/B,mBAAmB,EAAE,+BAA+B;wBACpD,qBAAqB,EAAE,uBAAuB;wBAC9C,iBAAiB,EAAE,sFAAsF;wBACzG,kBAAkB,EAAE,gCAAgC;wBACpD,eAAe,EAAE,wBAAwB;qBAC5C,CAAC;oBAEF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACxB,CAAC;gBAEM,kCAAgB,GAAvB,UAAwB,OAAO;oBAE3B,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACzD,MAAM,CAAC,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC;oBACxC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;gBACL,CAAC;gBAEM,+BAAa,GAApB,UAAqB,OAAO;oBAExB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;wBAC/B,UAAU,CAAC;4BACP,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,KAAK,YAAY,CAAC,CAAC,CAAC;gCACjC,OAAO,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAA;4BACtC,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,OAAO,CAAC,IAAI,CAAC,CAAC;4BAClB,CAAC;4BAAA,CAAC;wBAEN,CAAC,EAAE,IAAI,CAAC,CAAC;oBACb,CAAC,CAAC,CAAC;gBAEP,CAAC;gBAEM,qCAAmB,GAA1B,UAA2B,OAAO;oBAC9B,iEAAiE;oBACjE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,uJAAuJ,CAAC,CAAC,CAAC,CAAC;wBAC/K,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC;oBACzC,CAAC;gBACL,CAAC;gBAEM,gCAAc,GAArB,UAAsB,OAAO;oBACzB,2BAA2B;oBAC3B,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,uIAAuI,CAAC,CAAC,CAAC,CAAC;wBAC/J,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC;oBAC3C,CAAC;gBACL,CAAC;gBAEM,mCAAiB,GAAxB,UAAyB,OAAO;oBAC5B,sEAAsE;oBACtE,8DAA8D;oBAC9D,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC,CAAC,CAAC;wBACjE,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC;oBACvC,CAAC;gBACL,CAAC;gBACL,wBAAC;YAAD,CAlEA,AAkEC,IAAA;YAlED,iDAkEC,CAAA","file":"app/shared/services/validationService.js","sourcesContent":["import {Observable} from 'rxjs/Observable';\n\ninterface ValidationResult {\n    [key: string]: boolean;\n}\n\n\nexport class ValidationService {\n\n    static getValidatorErrorMessage(code: string) {\n        let config = {\n            'required': 'Field is Required',\n            'invalidCreditCard': 'Is invalid credit card number',\n            'invalidEmailAddress': 'Invalid email address',\n            'invalidPassword': 'Invalid password. Password must be at least 6 characters long, and contain a number.',\n            'startsWithNumber': 'Name can\\'t  Start With number',\n            'usernameTaken': 'Username Already Taken'\n        };\n\n        return config[code];\n    }\n\n    static startsWithNumber(control): ValidationResult {\n\n        if (control.value != \"\" && !isNaN(control.value.charAt(0))) {\n            return { \"startsWithNumber\": true };\n        } else {\n            return null;\n        }\n    }\n\n    static usernameTaken(control): Promise<ValidationResult> {\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                if (control.value === \"anismomin1\") {\n                    resolve({ \"usernameTaken\": true })\n                } else {\n                    resolve(null);\n                };\n\n            }, 1000);\n        });\n\n    }\n\n    static creditCardValidator(control) {\n        // Visa, MasterCard, American Express, Diners Club, Discover, JCB\n        if (control.value.match(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/)) {\n            return null;\n        } else {\n            return { 'invalidCreditCard': true };\n        }\n    }\n\n    static emailValidator(control) {\n        // RFC 2822 compliant regex\n        if (control.value.match(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\n            return null;\n        } else {\n            return { 'invalidEmailAddress': true };\n        }\n    }\n\n    static passwordValidator(control) {\n        // {6,100}           - Assert password is between 6 and 100 characters\n        // (?=.*[0-9])       - Assert a string has at least one number\n        if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\n            return null;\n        } else {\n            return { 'invalidPassword': true };\n        }\n    }\n}\n"],"sourceRoot":"/source/"}